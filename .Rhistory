# Clear environment
rm(list = ls())
setwd("~/Desktop/random-E11")
library(readr)
library(dplyr)
library(caret)
library(pROC)
d_raw_case <- read_delim("Data/raw/data-case.csv",
delim = ";", escape_double = FALSE, locale = locale(decimal_mark = ","),
trim_ws = TRUE) # manually removed single error in HOMA-IR row 281
spec(d_raw_case)
d_raw_control <- read_delim("Data/raw/data-control.csv",
delim = ";", escape_double = FALSE, locale = locale(decimal_mark = ","),
trim_ws = TRUE)
spec(d_raw_control)
#Add case/control indicator
d_case <- d_raw_case %>% mutate(T2D = 1) # Add column with 1 for cases
d_control <- d_raw_control %>% mutate(T2D = 0) # Add column with 0 for controls
d_case <- d_case %>% select( colnames(d_control))
##Create one large data set
d <- rbind(d_case, d_control)
## Remove rows with NA
d_clean <- na.omit(d)
## Remove sample col
d_clean <- select(d_clean,-Sample)
# Data preparation (Normalization of numericals)
d_clean$`Basal glucose level` <- scale(d_clean$`Basal glucose level`)
d_clean$`Glucose level 2 h after PGTT` <- scale(d_clean$`Glucose level 2 h after PGTT`)
d_clean$`Basal insulin level` <- scale(d_clean$`Basal insulin level`)
d_clean$`Insulin level 2 h after PGTT` <- scale(d_clean$`Insulin level 2 h after PGTT`)
d_clean$`HOMA-b` <- scale(d_clean$`HOMA-b`)
d_clean$`HOMA-IR` <- scale(d_clean$`HOMA-IR`)
scale_values <- preProcess(d_clean[, c("Age", "BMI")], method = c("center", "scale"))
d_clean[, c("Age", "BMI")] <- predict(scale_values, d_clean[, c("Age", "BMI")])
# Save the pre-processing object for future use in the API
saveRDS(scale_values, "data/processed/scale_values.rds")
# Do one hot encoding for categoricals
dummy_model <- dummyVars(~ `FTO [rs8050136]` +  `FTO [rs7202116]` + `FTO [rs9930506]` +  `KCNJ11 [rs5219]` + `SLC30A8 [rs13266634]` +  `CDKN2B [rs10811661]` + `CDKAL1 [rs7756992]` +  `CDKAL1 [rs9465871]` + `CDKAL1 [rs7754840]` +  `CDKAL1 [rs10946398]` , data = d_clean)
one_hot <- predict(dummy_model, newdata = d_clean)
d_clean <- cbind(d_clean, one_hot)
d_clean <- d_clean[, !sapply(d_clean, is.character)]
# Rename problematic columns
# Clean column names in d_clean
names(d_clean) <- gsub("`", "",                      # Remove backticks
gsub("\\[|\\]", "",                # Remove square brackets
gsub("\\s", "_",                  # Replace spaces with underscores
gsub("/", "", names(d_clean))))) # Remove double quotes
#* Export d_clean as a CSV
write.csv(d_clean, file = "data/processed/d_clean.csv", row.names = FALSE)
# --- Summary statistics
# --- Summary statistics
#
library(readr)
library(dplyr)
library(caret)
library(pROC)
library(PRROC)
library(corrplot)
library(ggplot2)
# Correlation matrix
cor_matrix <- cor(d_clean)
# Plot the correlation matrix as a heatmap
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.5)
# Train/test split
set.seed(258)
train_index <- createDataPartition(d_clean$T2D, p = 0.8, list = FALSE)
train_data <- d_clean[train_index, ]
test_data <- d_clean[-train_index, ]
# Logistic regression: general (1)
lr_general <- glm(T2D ~ FTO_rs8050136AA + FTO_rs8050136CA +
FTO_rs7202116GG + FTO_rs7202116AG +
FTO_rs9930506AA + FTO_rs9930506AG +
SLC30A8_rs13266634CC + SLC30A8_rs13266634CT +
KCNJ11_rs5219GluGlu + KCNJ11_rs5219GluLys +
CDKN2B_rs10811661CC + CDKN2B_rs10811661CT +
CDKAL1_rs7756992AA + CDKAL1_rs7756992AG +
CDKAL1_rs9465871CC + CDKAL1_rs9465871CT +
CDKAL1_rs7754840CC + CDKAL1_rs7754840CG +
CDKAL1_rs10946398AA + CDKAL1_rs10946398AC +
BMI + Age
, data = train_data, family = binomial)
summary(lr_general)
# # Logistic regression: highest significance (2)
lr_basic <- glm(T2D ~
KCNJ11_rs5219GluGlu + KCNJ11_rs5219GluLys +
CDKN2B_rs10811661CC + CDKN2B_rs10811661CT +
CDKAL1_rs7756992AA + CDKAL1_rs7756992AG +
BMI + Age
, data = train_data, family = binomial)
summary(lr_basic)
# Plot the correlation matrix as a heatmap
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.5)
dev.off()
library(readr)
library(dplyr)
library(caret)
library(pROC)
library(PRROC)
library(corrplot)
library(ggplot2)
# Correlation matrix
cor_matrix <- cor(d_clean)
# Plot the correlation matrix as a heatmap
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.5)
# Plot the correlation matrix as a heatmap
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.5)
